generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  firstName String
  lastName  String
  password  String
  roleId    String
  mRoleId    String?
  role            Role?     @relation(fields: [mRoleId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  experimentExposures ExperimentExposure[]
  notifications Notification[]
}

model OrdersAuditTrail {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String
  userId     String
  action     String
  actionTime DateTime @default(now())
  orderId    String
  storeId    String
}

model MilkRunAuditTrail {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  userId       String
  action       String
  actionTime   DateTime @default(now())
  orderId      String
  storeId      String
  agentId      String
  agentName    String
  deliveryDate String
}
model Log {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  incrementId String?
  type       String
  message    String
  context    Json?
  dataBefore Json?
  dataAfter  Json?
  timestamp  DateTime @default(now())

  @@map("logs")
}

model Category {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId   Int?      // ID Magento
  nameCategory String
  isActive     Boolean?  @default(true)
  image        String?
  accepted     Boolean  @default(true)
  createdAt    DateTime?           @default(now())
  updatedAt    DateTime?           @updatedAt

  supplierCategories    SupplierCategory[]
  subCategories  SubCategory[]
}



model Warehouse {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  warehouseId Int      @unique // ID Magento
  websiteId   Int
  name        String
  code        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  purchaseOrders PurchaseOrder[]
}
model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  product_id     Int?      @unique // ID Magento
  sku            String   @unique
  name           String
  price          Float
  special_price  Float?
  cost           Float?
  manufacturer   String?  // ID du fabricant
  category_ids   String[]   @db.String// IDs Magento des catégories
  website_ids    Int[]    @db.Int// IDs Magento des entrepôts
  image          String?
  url_key        String?
  created_at     String?  @map("created_at")
  updated_at     String?
  stock_item     StockItem?

  barcode              String?  // Remove @unique here
  pcb                  String?
  weight               Float?
  description          String?
  stock                Int?
  promo                Boolean  @default(false)
  minimumQte           Int?
  maximumQte           Int?
  sealable             Int?
  alertQte             Int?
  loyaltyPointsPerProduct       Float?
  loyaltyPointsPerUnit          Float?
  loyaltyPointsBonusQuantity    Float?
  loyaltyPointsThresholdQty     Float?
  accepted    Boolean  @default(true)
  hasPartner  Boolean  @default(false)

  typePcbId            String?  @db.ObjectId
  typePcb              TypePcb? @relation(fields: [typePcbId], references: [id])
  productTypeId        String?  @db.ObjectId
  productType          ProductType? @relation(fields: [productTypeId], references: [id])
  productStatusId      String?  @db.ObjectId
  productStatus        ProductStatus? @relation(fields: [productStatusId], references: [id])
  supplierId           String?  @db.ObjectId
  supplier             Manufacturer? @relation(fields: [supplierId], references: [id])
  taxId                String?   @db.ObjectId
  tax                  Tax?      @relation(fields: [taxId], references: [id])
  promotion            Promotion?  @relation(fields: [promotionId], references: [id])
  promotionId          String?     @db.ObjectId
  partnerId            String?     @db.ObjectId

  brand                Brand?  @relation(fields: [brandId], references: [id])
  brandId               String?     @db.ObjectId

  activities           String[]   @default([]) @db.String // Array of activities that can be empty
  images               Image[]


  notifyRequests       NotifyMe[]

  relatedProducts      RelatedProduct[] @relation("ProductToRelatedProduct")
  relatedTo            RelatedProduct[] @relation("RelatedProductToProduct")

  createdAt       DateTime?       @default(now())
  updatedAt       DateTime?       @updatedAt

  productSubCategories       ProductSubCategory[]
  favoriteProducts FavoriteProduct[]
  orderItems OrderItem[]
  reservationItems    ReservationItem[]
  CartItem CartItem[]
  skuPartners SkuPartner[]
  partner     Partner?  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@index([category_ids])
  @@map("products")
}

model StockItem {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  item_id        Int?
  product_id     Int    @unique
  stock_id       Int?
  qty            Float?
  is_in_stock    Boolean?
  min_qty        Float?
  min_sale_qty   Float?
  max_sale_qty   Float?
  backorders     Int?
  low_stock_date String?
  product        Product @relation(fields: [product_id], references: [product_id])
}



model Manufacturer {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  manufacturerId       Int      @unique // Correspond à manufacturer_id dans le JSON
  code                 String   @unique
  companyName          String   @map("company_name")
  contactName          String?  @map("contact_name")
  phoneNumber          String?  @map("phone_number")
  postalCode           String?  @map("postal_code")
  city                 String?
  country              String?
  capital              String?
  email                String?
  payments             Payment[]
  purchaseOrders       PurchaseOrder[]
  address              String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  products Product[]
  supplierCategories    SupplierCategory[]
  @@map("manufacturers")
}
model Payment {

  id             String         @id @default(auto()) @map("_id") @db.ObjectId

  amount         Float

  paymentMethod  PaymentMethod
  percentage     Float
  paymentDate    DateTime?

  manufacturer   Manufacturer   @relation(fields: [manufacturerId], references: [manufacturerId])

  manufacturerId Int

  purchaseOrder  PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  purchaseOrderId String?        @db.ObjectId

  createdAt      DateTime       @default(now())

  updatedAt      DateTime       @updatedAt

  @@map("payments")

}

enum PaymentMethod {
  CHEQUE
  TRAITE
  ESPECES
}


enum OrderState {

  IN_PROGRESS

  READY

  DELIVERED

  COMPLETED


}
model File {

  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  order     PurchaseOrder? @relation(fields: [orderId], references: [id])

  orderId   String?        @db.ObjectId

  @@map("files")

}
model Comment {

  id              String         @id @default(auto()) @map("_id") @db.ObjectId

  content         String

  purchaseOrder   PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id])

  purchaseOrderId String         @db.ObjectId

}

model PurchaseOrder {

  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String         @unique
  manufacturer    Manufacturer   @relation(fields: [manufacturerId], references: [manufacturerId])
  manufacturerId  Int
  warehouse       Warehouse      @relation(fields: [warehouseId], references: [warehouseId])
  warehouseId     Int
  deliveryDate    DateTime
  totalAmount     Float
  status          OrderState
  comments        Comment[]
  payments        Payment[]
  files           File[]
  products        ProductOrdered[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  @@map("purchase_orders")

}

model ProductOrdered {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  quantity       Int
  priceExclTax   Float
  total          Float
  sku            String?
  purchaseOrder  PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?
  @@map("productOrdered")
}


model TypePartner {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String  @unique
  partners Partner[]
  createdAt       DateTime?       @default(now())
  updatedAt       DateTime?       @updatedAt
  @@map("type_partners")
}


  model Partner {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    username        String   @unique
    firstName       String?
    lastName        String?
    email           String   @unique
    telephone       String
    address         String
    password        String
    isActive        Boolean  @default(true)
    logo            String?
    patent          String?
    responsibleName String?
    position        String?
    coverageArea    String
    minimumAmount   Float
    typePartner     TypePartner? @relation(fields: [typePartnerId], references: [id])
    typePartnerId   String?   @db.ObjectId
    mRoleId          String?
    role            Role?     @relation(fields: [mRoleId], references: [id])

    experimentExposures ExperimentExposure[]

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    sources       Source[]
    favoritePartners FavoritePartner[]
    skuPartners SkuPartner[]
    settings Settings[]
    products Product[]
    agents Agent[]
    notifications Notification[]
    CartItem CartItem[]
    OrderItem OrderItem[]
    orderPartners VendorOrder[]
    ReservationItem ReservationItem[]
    @@map("partners")
  }



model Agent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String?   @unique
  firstName String?
  lastName  String?
  email     String?   @unique
  telephone String?
  address   String?
  password  String?
  mRoleId    String?
  isActive  Boolean?  @default(true)
  partnerId   String   @db.ObjectId

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  OrderItem OrderItem[]
  VendorOrders         AgentAssign[]
  role            Role?     @relation(fields: [mRoleId], references: [id])
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("agents")
}

model Customers {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  governorate  String
  email        String    
  telephone    String
  address      String
  password     String
  mRoleId       String?
  isActive     Boolean?  @default(true)
  created_at   DateTime? @default(now())
  updated_at   DateTime? @updatedAt

  // Champs business
  socialName   String?
  fiscalId     String
  businessType String
  activity1    String
  activity2    String?

  // Nouveaux champs ajoutés
  cinPhoto     String?
  patentPhoto  String?
  // Relations
  favoriteProducts  FavoriteProduct[]
  favoritePartners  FavoritePartner[]
  orders            Order[]
  reservations      Reservation[]
  notifications     NotifyMe[]
  ReservationItem ReservationItem[]
  Cart Cart[]

  role            Role?     @relation(fields: [mRoleId], references: [id])

  @@map("customers")
}




model TypePcb {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  products Product[]

  @@map("type_pcb")
}


model ProductType {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  type    String   @unique
  products Product[]

  @@map("product_types")
}


model ProductStatus {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  actif   Boolean  @default(true)
  name    String   @unique
  products Product[]

  @@map("product_statuses")
}

model Tax {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  value    Float     @unique
  products Product[]
  reservationItems    ReservationItem[]
  @@map("taxes")
}

model Promotion {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  promoPrice Float
  products   Product[]

  @@map("promotions")
}

model Image {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  altText    String?
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId

  @@map("images")
}


model Brand {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  img        String
  name       String?
  products   Product[]

  @@map("brands")
}

model NotifyMe {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clientName  String
  product     Product  @relation(fields: [productSku], references: [sku])
  productSku  String
  customerId  String   @db.ObjectId
  customer    Customers @relation(fields: [customerId], references: [id])

  @@map("notify_me")
}

model RelatedProduct {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  productId         String   @db.ObjectId
  relatedProductId  String   @db.ObjectId


  product          Product  @relation("ProductToRelatedProduct", fields: [productId], references: [id], onDelete: Cascade)
  relatedProduct   Product  @relation("RelatedProductToProduct", fields: [relatedProductId], references: [id], onDelete: Cascade)

  @@unique([productId, relatedProductId])
  @@map("related_products")
}

model SupplierCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  supplierId String    @db.ObjectId
  categoryId String    @db.ObjectId

  supplier   Manufacturer   @relation(fields: [supplierId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])

  // @@unique([supplierId, categoryId])
}


model ProductSubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  productId  String    @db.ObjectId
  subcategoryId String    @db.ObjectId

  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  subcategory SubCategory  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  @@unique([productId, subcategoryId])
}

model SubCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  isActive    Boolean?  @default(true)
  image       String?
  categoryId  String?   @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productSubCategories       ProductSubCategory[]

  @@unique([name, categoryId])
}


model FavoriteProduct {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String   @db.ObjectId
  productId   String   @db.ObjectId

  customer    Customers @relation(fields: [customerId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FavoritePartner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String   @db.ObjectId
  partnerId   String   @db.ObjectId

  customer    Customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([customerId, partnerId])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model State {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  statuses  Status[]
  orders   Order[]
  OrderItem OrderItem[]
  orderPartners     VendorOrder[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  stateId  String   @db.ObjectId
  state    State    @relation(fields: [stateId], references: [id])
  orders   Order[]
  OrderItem OrderItem[]
  orderPartners     VendorOrder[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  amountTTC           Float
  amountRefunded      Float
  amountCanceled      Float
  amountOrdered       Float
  amountShipped       Float
  shippingMethod      String
  shippingAmount      Float
  loyaltyPtsValue     Int      @default(0)
  fromMobile          Boolean  @default(false)
  weight              Float
  deliveryDate        DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  statusId            String   @db.ObjectId
  status              Status   @relation(fields: [statusId], references: [id])
  isActive            Boolean  @default(true)

  stateId             String   @db.ObjectId
  state               State    @relation(fields: [stateId], references: [id])

  customerId          String   @db.ObjectId
  customer            Customers @relation(fields: [customerId], references: [id])


  reservationId     String?   @db.ObjectId @unique
  reservation       Reservation? @relation(fields: [reservationId], references: [id])

  mainOrderId       String?   @db.ObjectId
  mainOrder         MainOrder? @relation(fields: [mainOrderId], references: [id])
  orderItems        OrderItem[]
  orderPartners     VendorOrder[] 
  loyaltyPoints     LoyaltyPoints[]
  paymentMethodId   String       @db.ObjectId
  paymentMethod     OrderPayment @relation(fields: [paymentMethodId], references: [id])
}



model OrderItem {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  qteOrdered      Int
  qteRefunded     Int      @default(0)
  qteShipped      Int      @default(0)
  qteCanceled     Int      @default(0)
  discountedPrice Float?
  weight          Float
  sku             String   
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  orderId         String?   @db.ObjectId
  order           Order?    @relation(fields: [orderId], references: [id])

  productId       String   @db.ObjectId
  product         Product   @relation(fields: [productId], references: [id])

  sourceId       String?   @db.ObjectId
  partnerId      String?   @db.ObjectId
  
  source         Source?   @relation(fields: [sourceId], references: [id]) 
  partner        Partner?  @relation(fields: [partnerId], references: [id])

  stateId             String?  @db.ObjectId
  state               State?    @relation(fields: [stateId], references: [id])

  statusId            String?   @db.ObjectId
  status              Status?   @relation(fields: [statusId], references: [id])
  agentId             String?  @db.ObjectId
  agent               Agent?   @relation(fields: [agentId], references: [id])


}


model VendorOrder {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orderCode     String @unique
  total         Float  @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  statusId      String?   @db.ObjectId
  status        Status?   @relation(fields: [statusId], references: [id])
  stateId       String?   @db.ObjectId
  state         State?    @relation(fields: [stateId], references: [id])
  partnerId     String    @db.ObjectId
  partner       Partner   @relation(fields: [partnerId], references: [id])
  orderId       String    @db.ObjectId
  order         Order    @relation(fields: [orderId], references: [id])
  AgentAssignId String?   @db.ObjectId
  orderAgent    AgentAssign? @relation(fields: [AgentAssignId], references: [id])

  itemsSnapshot Json? // <--- Add this line
}


model AgentAssign {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  agentId           String?  @db.ObjectId
  agent             Agent?   @relation(fields: [agentId], references: [id])

  VendorOrders          VendorOrder[] 
 
}







model OrderPayment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orders    Order[]
  reservations    Reservation[]
}

model Reservation {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  amountTTC           Float
  amountOrdered       Float
  shippingAmount      Float    @default(0)
  shippingMethod      String
  isActive            Boolean  @default(false)
  loyaltyPtsValue     Int      @default(0)
  fromMobile          Boolean  @default(false)
  weight              Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  customerId          String   @db.ObjectId
  customer            Customers @relation(fields: [customerId], references: [id])
  reservationItems    ReservationItem[]
  paymentMethodId     String   @db.ObjectId
  paymentMethod       OrderPayment @relation(fields: [paymentMethodId], references: [id])

  order               Order?  
}


model ReservationItem {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  qteReserved    Int
  price          Float?
  discountedPrice Float?
  weight         Float
  sku            String   
  taxId          String?   @db.ObjectId
  sourceId       String?   @db.ObjectId
  customerId     String?   @db.ObjectId
  deliveryDate    DateTime?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // Relationships
  reservationId  String?   @db.ObjectId
  reservation    Reservation? @relation(fields: [reservationId], references: [id])
  productId      String   @db.ObjectId
  product        Product @relation(fields: [productId], references: [id])
  tax            Tax?      @relation(fields: [taxId], references: [id])
  source         Source?   @relation(fields: [sourceId], references: [id]) 
  Customer       Customers? @relation(fields:[customerId],references: [id])
  partnerId      String?   @db.ObjectId
  partner        Partner?  @relation(fields: [partnerId], references: [id])
}

model Cart {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  customer   Customers  @relation(fields: [customerId], references: [id])
  customerId String    @unique @db.ObjectId
  items      CartItem[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model CartItem {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  cart       Cart      @relation(fields: [cartId], references: [id])
  cartId     String    @db.ObjectId
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String    @db.ObjectId
  partner    Partner   @relation(fields: [partnerId], references: [id])
  partnerId  String    @db.ObjectId
  source     Source?   @relation(fields: [sourceId], references: [id])
  sourceId   String?   @db.ObjectId
  
  quantity   Int       @default(1)
  price      Float
  weight     Float?
  productName String
  partnerName String
  partnerMinimumAmount Float
  sourceName  String?
  stock       Int? 
  image       String?
  sku         String?
  taxRate     Float?
  minQty      Int?
  maxQty      Int?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([cartId, productId, partnerId, sourceId])
}



model LoyaltyPoints {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ptsNumber    Int
  ptsValue     Float
  minAmount    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships

  orderId      String?   @db.ObjectId
  order        Order?    @relation(fields: [orderId], references: [id])


}


model MainOrder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many relationship with Order
  orders    Order[]
}



model Settings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  deliveryType      String
  deliveryTypeAmount      String
  freeDeliveryAmount     String
  loyaltyPointsAmount     String
  loyaltyPointsUnique    String
  partnerId    String?   @db.ObjectId
  partner      Partner?  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  schedules   SettingSchedule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SettingSchedule {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  day        String
  startTime  String
  endTime    String

  settingId  String   @db.ObjectId
  setting    Settings @relation(fields: [settingId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Role {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String         @unique
  permissions RolePermission[]
  partners    Partner[]
  agents      Agent[]
  customers   Customers[]
  admins      User[]

}

model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  resource  String
  roles     RolePermission[]
}

model RolePermission {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String
  permissionId String
  actions      String[]
  role         Role       @relation(fields: [roleId], references: [id],onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id],onDelete: Cascade)
  @@unique([roleId, permissionId])
}

model Banner {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  altText    String?
  description String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  @@map("banners")
}

model SkuPartner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  partnerId   String   @db.ObjectId
  skuPartner  String   
  skuProduct  String

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  stock       Stock[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, partnerId])
  @@map("sku_partners")
}

model Source {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  partnerId   String   @db.ObjectId
  partner     Partner?  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  stock       Stock[]

  reservationItems    ReservationItem[]
  CartItem CartItem[]
  OrderItem OrderItem[]


  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("sources")
}

model Stock {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  skuPartnerId    String   @db.ObjectId
  sourceId        String   @db.ObjectId

  stockQuantity   Int
  sealable        Int?
  minQty          Int
  maxQty          Int
  price           Float
  special_price  Float?
  loyaltyPointsPerProduct       Int?
  loyaltyPointsPerUnit          Int?
  loyaltyPointsBonusQuantity    Int?
  loyaltyPointsThresholdQty     Int?

  skuPartner      SkuPartner  @relation(fields: [skuPartnerId], references: [id], onDelete: Cascade)
  source          Source      @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([skuPartnerId, sourceId])
  @@map("stocks")
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  message     String
  isRead      Boolean  @default(false)
  link        String   
  recipientType String
  
  // Either adminId or partnerId will be filled based on recipientType
  adminId     String?  @db.ObjectId
  partnerId   String?  @db.ObjectId
  
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  admin       User?    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  partner     Partner? @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model ExperimentExposure {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  partnerId     String?  @db.ObjectId
  adminId      String?   @db.ObjectId

  partner       Partner?  @relation(fields: [partnerId], references: [id])
  admin         User?  @relation(fields: [adminId], references: [id])

  experimentId  String
  variationId   Int
  timestamp     DateTime @default(now())

  @@map("experiment_exposures")
}



