generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  firstName String
  lastName  String
  password  String
  roleId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrdersAuditTrail {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String
  userId     String
  action     String
  actionTime DateTime @default(now())
  orderId    String
  storeId    String
}

model MilkRunAuditTrail {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  userId       String
  action       String
  actionTime   DateTime @default(now())
  orderId      String
  storeId      String
  agentId      String
  agentName    String
  deliveryDate String
}
model Log {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  message    String
  context    Json?
  dataBefore Json?
  dataAfter  Json?
  timestamp  DateTime @default(now())

  @@map("logs")
}

model Category {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId   Int?      // ID Magento
  nameCategory String
  isActive     Boolean?  @default(true)
  image        String?             
  createdAt    DateTime?           @default(now())
  updatedAt    DateTime?           @updatedAt

  supplierCategories    SupplierCategory[]  
  subCategories  SubCategory[]
}



model Warehouse {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  warehouseId Int      @unique // ID Magento
  websiteId   Int
  name        String
  code        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  purchaseOrders PurchaseOrder[] 
}
model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  product_id     Int?      @unique // ID Magento
  sku            String   @unique
  name           String
  price          Float
  special_price  Float?
  cost           Float?
  manufacturer   String?  // ID du fabricant
  category_ids   String[]   @db.String// IDs Magento des catégories
  website_ids    Int[]    @db.Int// IDs Magento des entrepôts
  image          String?
  url_key        String?
  created_at     String?  @map("created_at")
  updated_at     String?
  stock_item     StockItem?


  pcb                  String?    
  weight               Float?   
  description          String?  
  stock                Int?     
  promo                Boolean  @default(false)  
  minimumQte           Int?     
  maximumQte           Int?  
  sealable             Float?
  alertQte             Int?
  loyaltyPoints        Float?
  loyaltyPointsAmount  Float?    

  typePcbId            String?  @db.ObjectId 
  typePcb              TypePcb? @relation(fields: [typePcbId], references: [id]) 
  productTypeId        String?  @db.ObjectId  
  productType          ProductType? @relation(fields: [productTypeId], references: [id])  
  productStatusId      String?  @db.ObjectId  
  productStatus        ProductStatus? @relation(fields: [productStatusId], references: [id]) 
  supplierId           String?  @db.ObjectId 
  supplier             Manufacturer? @relation(fields: [supplierId], references: [id]) 
  taxId                String?   @db.ObjectId 
  tax                  Tax?      @relation(fields: [taxId], references: [id])
  promotion            Promotion?  @relation(fields: [promotionId], references: [id])
  promotionId          String?     @db.ObjectId
  images               Image[]
  notifyRequests       NotifyMe[]
  
  relatedProducts      RelatedProduct[] @relation("ProductToRelatedProduct")
  relatedTo            RelatedProduct[] @relation("RelatedProductToProduct")

  createdAt       DateTime?       @default(now())
  updatedAt       DateTime?       @updatedAt

  productSubCategories       ProductSubCategory[]
  favoriteProducts FavoriteProduct[]
  favoritePartners FavoritePartner[]
  orderItems OrderItem[]
  reservationItems    ReservationItem[]
  skuPartners SkuPartner[]
  
  @@index([category_ids])
  @@map("products")
}

model StockItem {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  item_id        Int?
  product_id     Int    @unique
  stock_id       Int?
  qty            Float?
  is_in_stock    Boolean?
  min_qty        Float?
  min_sale_qty   Float?
  max_sale_qty   Float?
  backorders     Int?
  low_stock_date String?
  product        Product @relation(fields: [product_id], references: [product_id])
}



model Manufacturer {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  manufacturerId       Int      @unique // Correspond à manufacturer_id dans le JSON
  code                 String   @unique
  companyName          String   @map("company_name")
  contactName          String?  @map("contact_name")
  phoneNumber          String?  @map("phone_number")
  postalCode           String?  @map("postal_code")
  city                 String?
  country              String?
  capital              String?
  email                String?
  payments             Payment[]     
  purchaseOrders       PurchaseOrder[] 
  address              String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  products Product[]  
  supplierCategories    SupplierCategory[]  
  @@map("manufacturers")
}
model Payment {

  id             String         @id @default(auto()) @map("_id") @db.ObjectId

  amount         Float

  paymentMethod  PaymentMethod
  percentage     Float
  paymentDate    DateTime?

  manufacturer   Manufacturer   @relation(fields: [manufacturerId], references: [manufacturerId])

  manufacturerId Int

  purchaseOrder  PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])

  purchaseOrderId String?        @db.ObjectId

  createdAt      DateTime       @default(now())

  updatedAt      DateTime       @updatedAt

  @@map("payments")

}

enum PaymentMethod {
  CHEQUE
  TRAITE
  ESPECES
}


enum OrderState {

  IN_PROGRESS

  READY

  DELIVERED

  COMPLETED


}
model File {

  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String 
  url       String
  order     PurchaseOrder? @relation(fields: [orderId], references: [id])

  orderId   String?        @db.ObjectId

  @@map("files")

}
model Comment {

  id              String         @id @default(auto()) @map("_id") @db.ObjectId

  content         String

  purchaseOrder   PurchaseOrder  @relation(fields: [purchaseOrderId], references: [id])

  purchaseOrderId String         @db.ObjectId

}

model PurchaseOrder {

  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String         @unique
  manufacturer    Manufacturer   @relation(fields: [manufacturerId], references: [manufacturerId])
  manufacturerId  Int
  warehouse       Warehouse      @relation(fields: [warehouseId], references: [warehouseId])
  warehouseId     Int
  deliveryDate    DateTime
  totalAmount     Float
  status          OrderState
  comments        Comment[]
  payments        Payment[]
  files           File[]
  products        ProductOrdered[] 
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  @@map("purchase_orders")

}

model ProductOrdered {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  quantity       Int
  priceExclTax   Float
  total          Float 
  sku            String? 
  purchaseOrder  PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?
  @@map("productOrdered")
}


model TypePartner {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String  @unique
  partners Partner[]
  createdAt       DateTime?       @default(now())
  updatedAt       DateTime?       @updatedAt
  @@map("type_partners")
}


model Partner {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  username        String   @unique
  firstName       String
  lastName        String
  email           String   @unique
  telephone       String
  address         String
  password        String
  isActive        Boolean  @default(true)
  logo            String?  
  patent          String?  
  responsibleName String   
  position        String  
  coverageArea    String   
  minimumAmount   Float    
  typePartner     TypePartner @relation(fields: [typePartnerId], references: [id])
  typePartnerId   String   @db.ObjectId   
  roleId          String?
  role            Role?     @relation(fields: [roleId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  favoritePartners FavoritePartner[]
  orders   Order[]
  reservations Reservation[]
  skuPartners SkuPartner[]
  settings Settings[]
  @@map("partners")
}




model Agent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String?   @unique
  firstName String?
  lastName  String?
  email     String?   @unique
  telephone String?
  address   String?
  password  String?
  roleId    String?
  isActive  Boolean?  @default(true)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  orders   Order[]
  reservations Reservation[]
  @@map("agents")
}

model Customers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String?
  lastName  String?
  governorate String?
  gender String?
  retailer_profile String?
  email     String?   
  telephone String?
  address   String?
  password  String?
  roleId    String?
  isActive  Boolean?  @default(true)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  favoriteProducts FavoriteProduct[]
  favoritePartners FavoritePartner[]
  orders   Order[]
  reservations Reservation[]
  notifications   NotifyMe[] 
  @@map("customers")
}







model TypePcb {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique 
  products Product[]  
  
  @@map("type_pcb") 
}


model ProductType {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  type    String   @unique 
  products Product[] 
  
  @@map("product_types") 
}


model ProductStatus {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  actif   Boolean  @default(true) 
  name    String   @unique         
  products Product[]  

  @@map("product_statuses")
}

model Tax {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  value    Float     @unique 
  products Product[] 
  orderItems OrderItem[]
  reservationItems    ReservationItem[]
  @@map("taxes")
}

model Promotion {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  startDate  DateTime  
  endDate    DateTime  
  promoPrice Float     
  products   Product[] 

  @@map("promotions")
}

model Image {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String   
  altText    String?  
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId

  @@map("images")
}


model NotifyMe {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clientName  String   
  product     Product  @relation(fields: [productSku], references: [sku])
  productSku  String
  customerId  String   @db.ObjectId
  customer    Customers @relation(fields: [customerId], references: [id])

  @@map("notify_me")
}

model RelatedProduct {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  productId         String   @db.ObjectId
  relatedProductId  String   @db.ObjectId


  product          Product  @relation("ProductToRelatedProduct", fields: [productId], references: [id], onDelete: Cascade)
  relatedProduct   Product  @relation("RelatedProductToProduct", fields: [relatedProductId], references: [id], onDelete: Cascade)

  @@unique([productId, relatedProductId])  
  @@map("related_products")
}

model SupplierCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  supplierId String    @db.ObjectId
  categoryId String    @db.ObjectId

  supplier   Manufacturer   @relation(fields: [supplierId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])

  // @@unique([supplierId, categoryId])  
}


model ProductSubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  productId  String    @db.ObjectId
  subcategoryId String    @db.ObjectId  

  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  subcategory SubCategory  @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)  
  @@unique([productId, subcategoryId])
}

model SubCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  isActive    Boolean?  @default(true)
  image       String?       
  categoryId  String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productSubCategories       ProductSubCategory[]

  @@unique([name, categoryId]) 
}


model FavoriteProduct {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String   @db.ObjectId
  productId   String   @db.ObjectId

  customer    Customers @relation(fields: [customerId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FavoritePartner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId  String   @db.ObjectId
  productId   String   @db.ObjectId
  partnerId   String   @db.ObjectId

  customer    Customers @relation(fields: [customerId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  partner     Partner  @relation(fields: [partnerId], references: [id])

  @@unique([customerId, productId, partnerId])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model State {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  statuses  Status[] 
  orders   Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  stateId  String   @db.ObjectId
  state    State    @relation(fields: [stateId], references: [id])
  orders   Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  amountExclTaxe      Float
  amountTTC           Float
  amountBeforePromo   Float
  amountAfterPromo    Float
  amountRefunded      Float
  amountCanceled      Float
  amountOrdered       Float
  amountShipped       Float
  shippingMethod      String
  loyaltyPtsValue     Int      @default(0)
  fromMobile          Boolean  @default(false)
  weight              Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  statusId            String   @db.ObjectId
  status              Status   @relation(fields: [statusId], references: [id]) 
  isActive            Boolean  @default(true)

  stateId             String   @db.ObjectId
  state               State    @relation(fields: [stateId], references: [id]) 

  customerId          String   @db.ObjectId
  customer            Customers @relation(fields: [customerId], references: [id]) 

  agentId             String?  @db.ObjectId
  agent               Agent?   @relation(fields: [agentId], references: [id]) 

  reservationId       String?  @db.ObjectId @unique
  reservation         Reservation? @relation

  mainOrderId   String?   @db.ObjectId
  mainOrder     MainOrder? @relation(fields: [mainOrderId], references: [id])


  partnerId           String   @db.ObjectId
  partner            Partner   @relation(fields: [partnerId], references: [id]) 
  orderItems OrderItem[]
  loyaltyPoints LoyaltyPoints[]
  paymentMethodId   String       @db.ObjectId
  paymentMethod     OrderPayment @relation(fields: [paymentMethodId], references: [id]) // Each Order has 1 PaymentMethod

}


model OrderItem {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  qteOrdered      Int
  qteRefunded     Int      @default(0)
  qteShipped      Int      @default(0)
  qteCanceled     Int      @default(0)
  discountedPrice Float
  weight          Float
  sku             String   @unique
  taxId           String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  orderId         String   @db.ObjectId
  order           Order    @relation(fields: [orderId], references: [id]) 

  productId       String   @db.ObjectId
  product         Product   @relation(fields: [productId], references: [id]) 

  tax             Tax      @relation(fields: [taxId], references: [id]) 
}

model OrderPayment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orders    Order[]  
  reservations    Reservation[]
}

model Reservation {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  amountExclTaxe      Float
  amountTTC           Float
  amountBeforePromo   Float
  amountAfterPromo    Float
  amountRefunded      Float
  amountCanceled      Float
  amountOrdered       Float
  amountShipped       Float
  shippingMethod      String
  isActive            Boolean  @default(false)
  loyaltyPtsValue     Int      @default(0)
  fromMobile          Boolean  @default(false)
  weight              Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  customerId          String   @db.ObjectId
  customer            Customers @relation(fields: [customerId], references: [id]) 

  agentId             String?  @db.ObjectId
  agent               Agent?   @relation(fields: [agentId], references: [id]) 

  partnerId           String   @db.ObjectId
  partner             Partner  @relation(fields: [partnerId], references: [id]) 

  orderId             String?  @db.ObjectId @unique
  order               Order?   @relation(fields: [orderId], references: [id])

  reservationItems    ReservationItem[]

  paymentMethodId     String   @db.ObjectId
  paymentMethod       OrderPayment @relation(fields: [paymentMethodId], references: [id]) 
}

model ReservationItem {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  qteReserved    Int
  qteCanceled    Int
  discountedPrice Float
  weight         Float
  sku            String @unique
  taxId           String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  reservationId  String   @db.ObjectId
  reservation    Reservation @relation(fields: [reservationId], references: [id]) 

  productId      String   @db.ObjectId
  product        Product @relation(fields: [productId], references: [id]) 
  tax             Tax      @relation(fields: [taxId], references: [id]) 
}

model LoyaltyPoints {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ptsNumber    Int
  ptsValue     Float
  minAmount    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships

  orderId      String?   @db.ObjectId
  order        Order?    @relation(fields: [orderId], references: [id]) 


}


model MainOrder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // One-to-many relationship with Order
  orders    Order[]
}

model SkuPartner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  partnerId   String   @db.ObjectId
  skuPartner  String   @unique
  skuProduct  String

  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, partnerId, skuPartner])
  @@map("sku_partners")
}

model Settings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  deliveryType      String
  deliveryTypeAmount      String
  freeDeliveryAmount     String 
  loyaltyPointsAmount     String   
  loyaltyPointsUnique    String  
  partnerId    String?   @db.ObjectId
  partner      Partner?  @relation(fields: [partnerId], references: [id]) 
  schedules   SettingSchedule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SettingSchedule {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  day        String
  startTime  String
  endTime    String

  settingId  String   @db.ObjectId
  setting    Settings @relation(fields: [settingId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Role {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String         @unique
  permissions RolePermission[]
  partners    Partner[]
}

model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  resource  String  
  roles     RolePermission[]
}

model RolePermission {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id],onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id],onDelete: Cascade)
  @@unique([roleId, permissionId])
}